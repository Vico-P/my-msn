import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { environment } from 'src/environment/environment';
import { Router } from '@angular/router';
import User from '../entities/user.entities';

@Injectable({ providedIn: 'root' })
export class AccountService {
  private http: HttpClient;
  private router: Router;

  constructor(http: HttpClient, router: Router) {
    this.http = http;
    this.router = router;
  }

  public login(login: string, password: string): Promise<any> {
    return new Promise((resolve, reject) => {
      this.http
        .post<{ token: string }>(`${environment.apiUrl}/login`, {
          login,
          password,
        })
        .subscribe({
          next: (res) => {
            // Saving token generated by backend
            localStorage.setItem('token', res.token);
            resolve(undefined);
          },
          error: (error: HttpErrorResponse) => {
            reject(error);
          },
        });
    });
  }

  public register({
    username,
    email,
    password,
    confirmPassword,
  }: {
    username: string;
    email: string;
    password: string;
    confirmPassword: string;
  }): Promise<User> {
    return new Promise((resolve, reject) => {
      this.http
        .post<User>(`${environment.apiUrl}/register`, {
          username,
          email,
          password,
          confirmPassword,
        })
        .subscribe({
          next: (res) => {
            resolve(res);
          },
          error: (error: HttpErrorResponse) => {
            reject(error);
          },
        });
    });
  }

  public verifyEmail(token: string): Promise<void> {
    return new Promise((resolve, reject) => {
      this.http
        .patch<null>(
          `${environment.apiUrl}/verify-email?token=${token}`,
          undefined
        )
        .subscribe({
          next: () => {
            resolve();
          },
          error: (error: HttpErrorResponse) => {
            reject(error);
          },
        });
    });
  }

  public logout(): void {
    // Clearing localStorage
    localStorage.clear();
    // Redirecting to login page
    this.router.navigate(['/']);
  }
}
